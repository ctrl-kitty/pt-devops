#################################################
#################################################
################## DB_PLAY##################
#################################################
#################################################
- hosts: debug
  vars_files:
    - vars.yml

  pre_tasks:
    - name: "Install packages"
      apt: "name={{ item }} state=present"
      with_items:
        - postgresql
        - postgresql-contrib
        - libpq-dev
        - acl
        - python3-psycopg2
      become: true
  tasks:
    - name: "Create postgres data directory"
      shell: "mkdir -p {{ postgres_data_path }}; chmod 0644 {{ postgres_data_path }}"
      become: true
      become_user: postgres

    - name: "Create postgres_repl data directory"
      shell: "mkdir -p {{ postgres_archive_path }};chown postgres:postgres {{ postgres_archive_path }}"
      become: true

    - name: "Create postgres_logs data directory"
      shell: "mkdir -p {{ postgres_log_path }};chown postgres:postgres {{ postgres_log_path }}"
      become: true

    - name: "Add rm user to postgres group(for reading logs)"
      shell: "usermod -aG postgres {{ rm_user }}"
      become: true

    - name: "Find out if PostgreSQL is initialized"
      ansible.builtin.stat:
        path: "{{ postgres_conf_path }}/pg_hba.conf"
      register: postgres_data

    - name: "Initialize PostgreSQL"
      shell: "{{ postgres_bin_path }}/initdb -D {{ postgres_data_path }}"
      when: not postgres_data.stat.exists
      become: true
      become_user: postgres
    - name: "Start and enable services"
      service: "name={{ item }} state=started enabled=yes"
      with_items:
        - postgresql

    - name: "Create app database"
      postgresql_db:
        state: present
        name: "{{ db_name }}"
      become: yes
      become_user: postgres

    - name: "Create db user"
      postgresql_user:
        state: present
        name: "{{ db_mater_user }}"
        password: "{{ db_password }}"
      become: yes
      become_user: postgres

    - name: "Create db repl user"
      postgresql_user:
        state: present
        role_attr_flags: replication
        name: "{{ db_repl_user }}"
        password: "{{ db_repl_password }}"
      become: yes
      become_user: postgres
    - name: "Grant db user access to app db"
      postgresql_privs:
        type: database
        database: "{{ db_name }}"
        roles: "{{ db_mater_user }}"
        grant_option: no
        privs: all
      become: yes
      become_user: postgres

    - name: "Copy init.sql script to remote"
      template:
        src: "init.sql"
        dest: "~/init.sql"
      become: yes
      become_user: postgres

    - name: "Run queries from init.sql"
      command: "psql -d tg_data -f ~/init.sql"
      become: yes
      become_user: postgres

    - name: "Allow md5 connection for the repl db user"
      postgresql_pg_hba:
        dest: "{{ postgres_conf_path }}/pg_hba.conf"
        contype: host
        databases: replication
        address: 0.0.0.0/0
        method: md5
        users: "{{ db_repl_user }}"
        create: true
      become: yes
      become_user: postgres
    - name: "Allow md5 connection for the db user"
      postgresql_pg_hba:
        dest: "{{ postgres_conf_path }}/pg_hba.conf"
        contype: host
        databases: all
        address: 0.0.0.0/0
        method: md5
        users: "{{ db_mater_user }}"
        create: true
      become: yes
      become_user: postgres
    - name: Configure global settings.
      lineinfile:
        dest: "{{ postgres_conf_path }}/postgresql.conf"
        regexp: "^#?{{ item.option }}.+$"
        line: "{{ item.option }} = '{{ item.value }}'"
        state: "{{ item.state | default('present') }}"
        mode: 0644
      with_items: "{{ postgresql_master_config_options }}"
      become: yes
      become_user: postgres
      notify: restart postgres
  handlers:
    - name: restart postgres
      service: name=postgresql state=restarted
      become: yes

#################################################
#################################################
################## DB_REPL_PLAY##################
#################################################
#################################################

- hosts: debug2
  vars_files:
    - vars.yml
  pre_tasks:
    - name: "Install packages"
      apt: "name={{ item }} state=present"
      with_items:
        - postgresql
        - postgresql-contrib
        - libpq-dev
        - acl
        - python3-psycopg2
      become: true

  tasks:
    - service:
        name: postgresql
        state: stopped
      become: true

    - file:
        path: /var/lib/postgresql/14/main/
        state: absent
      become: true

    - file:
        path: /var/lib/postgresql/14/main/
        owner: postgres
        group: postgres
        mode: 0700
        state: directory
      become: true

    - name: "Create base backup"
      shell: "export PGPASSWORD='{{ db_repl_password }}' && pg_basebackup -P -R -X stream -D /var/lib/postgresql/14/main -h {{ db_master_host }} -U {{ db_repl_user }}"
      become: yes
      become_user: postgres

    - service:
        name: postgresql
        state: started
      become: true

- hosts: debug3
  vars_files:
    - vars.yml
  environment:
    TOKEN: "{{ token }}"
    DB_HOST: "{{ db_master_host }}"
    DB_PORT: "5432"
    DB_USER: "{{ db_mater_user }}"
    DB_PASSWORD: "{{ db_password }}"
    DB_DATABASE: "{{ db_name }}"
    RM_HOST: "{{ rm_host }}"
    RM_PORT: "{{ rm_port }}"
    RM_USER: "{{ rm_user }}"
    RM_PASSWORD: "{{ rm_password }}"
  pre_tasks:
    - name: "Install packages"
      apt: "name={{ item }} state=present"
      with_items:
        - python3
        - python3-pip
        - python3-psycopg2
      become: true
  tasks:
    - name: "Clone bot folder"
      git:
        repo: "{{ repo }}"
        dest: ~/repo
        version: "{{ git_branch }}"
      become: true
    - name: "Install requirements.txt"
      pip:
        requirements: "~/repo/bot/requirements.txt"
      become: true
    - name: "Run bot"
      shell: "python3 ~/repo/bot/bot.py"
