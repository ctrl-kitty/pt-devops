- hosts: debug
  vars_files:
    - vars.yml

#postgresql_global_config_options:
#  - option: wal_level
#    value: 'replica'
#  - option: archive_mode
#    value: 'on'
#  - option: max_replication_slots
#    value: '10'
#  - option: max_wal_senders
#    value: '10'
#  - option: archive_command
#    value: 'cp %p /oracle/pg_data/archive/%f'
#  - option: log_replication_commands
#    value: 'on'
#  - option: log_file_mode
#    value: '0640'
#  - option: log_filename
#    value: 'postgres.log'
#  - option: wal_log_hints
#    value: 'on'
#  - option: logging_collector
#    value: 'on'
#  - option: log_directory
#    value: '/var/log/postgres/'
#  - option:
#    value:
  pre_tasks:
    - name: "Install packages"
      apt: "name={{ item }} state=present"
      with_items:
        - postgresql
        - postgresql-contrib
        - libpq-dev
        - acl
        - python3-psycopg2
#        - python3
#        - python3-pip
      become: true

#    - name: "Install Python packages"
#      pip: "name={{ item }}  state=present"
#      with_items:
#        - psycopg2-binary
    - name: "Create postgres data directory"
      shell: "mkdir -p /var/lib/postgresql/14/data; chmod 0644 /var/lib/postgresql/14/data"
      become: true
      become_user: postgres

  tasks:
    - name: "Find out if PostgreSQL is initialized"
      ansible.builtin.stat:
        path: "/etc/postgresql/14/main/pg_hba.conf"
      register: postgres_data

    - name: "Initialize PostgreSQL"
      shell: "/usr/lib/postgresql/14/bin/initdb -D /var/lib/postgresql/14/data"
      when: not postgres_data.stat.exists
      become: true
      become_user: postgres
    - name: "Start and enable services"
      service: "name={{ item }} state=started enabled=yes"
      with_items:
        - postgresql

    - name: "Create app database"
      postgresql_db:
        state: present
        name: "{{ db_name }}"
      become: yes
      become_user: postgres

    - name: "Create db user"
      postgresql_user:
        state: present
        name: "{{ db_user }}"
        password: "{{ db_password }}"
      become: yes
      become_user: postgres

    - name: "Grant db user access to app db"
      postgresql_privs:
        type: database
        database: "{{ db_name }}"
        roles: "{{ db_user }}"
        grant_option: no
        privs: all
      become: yes
      become_user: postgres
    - name: "Allow md5 connection for the repl db user"
      postgresql_pg_hba:
        dest: "/etc/postgresql/14/main/pg_hba.conf"
        contype: host
        databases: replication
        address: 0.0.0.0/0
        method: md5
        users: "{{ db_repl_user }}"
        create: true
      become: yes
      become_user: postgres
    - name: "Allow md5 connection for the db user"
      postgresql_pg_hba:
        dest: "/etc/postgresql/14/main/pg_hba.conf"
        contype: host
        databases: all
        address: 0.0.0.0/0
        method: md5
        users: "{{ db_user }}"
        create: true
      become: yes
      become_user: postgres
      notify: restart postgres
    - name: Configure global settings.
      lineinfile:
        dest: "/etc/postgresql/14/main/postgresql.conf"
        regexp: "^#?{{ item.option }}.+$"
        line: "{{ item.option }} = '{{ item.value }}'"
        state: "{{ item.state | default('present') }}"
        mode: 0644
      with_items: "{{ postgresql_global_config_options }}"
      become: yes
      become_user: postgres
  handlers:
    - name: restart postgres
      service: name=postgresql state=restarted
      become: yes
